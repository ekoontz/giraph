/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.giraph.comm.requests;

import org.apache.giraph.comm.ServerData;
import org.apache.giraph.comm.netty.NettyServer;
import org.apache.giraph.comm.netty.SaslNettyServer;
import org.apache.giraph.comm.requests.RequestType;
import org.apache.giraph.comm.requests.WritableRequest;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;
import org.apache.log4j.Logger;
import org.jboss.netty.channel.ChannelHandlerContext;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

/**
 * Send and receive SASL tokens.
 *
 * @param <I> Vertex id
 * @param <V> Vertex data
 * @param <E> Edge data
 * @param <M> Message data
 */
@SuppressWarnings("rawtypes")
public class SaslTokenMessage<I extends WritableComparable,
    V extends Writable, E extends Writable,
    M extends Writable> extends WritableRequest<I, V, E, M> {
  /** Class logger */
  private static final Logger LOG =
      Logger.getLogger(SaslTokenMessage.class);

  public byte[] token;

  @Override
  public RequestType getType() {
    return RequestType.SASL_TOKEN_MESSAGE;
  }
  /**
   * Constructor used for reflection only
   */
  public SaslTokenMessage() { }

  /**
   * Constructor used to send request.
   *
   * @param token the SASL token, generated by a SaslClient or SaslServer.
   */
  public SaslTokenMessage(byte[] token) {
    LOG.debug("creating SASL message with size: " + token.length);
    this.token = token;
  }

  @Override
  public void readFieldsRequest(DataInput input) throws IOException {
    LOG.debug("reading fields from DataInput: " + input);
    int tokenSize = input.readInt();
    LOG.debug("token size is: " + tokenSize);
    token = new byte[tokenSize];
    LOG.debug("now reading token.");
    input.readFully(token);
    LOG.debug("read SASL token of length: " + token.length);
  }

  @Override
  public void writeRequest(DataOutput output) throws IOException {
    LOG.debug("write() called on token of length: " + token.length);
    output.writeInt(token.length);
    output.write(token);
    LOG.debug("write() finished writing token.");
  }

  /**
   *  Server-side SASL processing. See ResponseClientHandler for client-side.
   *  SASL processing.
   */
  @Override
  public void doRequest(ServerData<I, V, E, M> serverData, ChannelHandlerContext ctx) {
    if (ctx == null) {
      LOG.debug("ChannelHandlerContext is null: assuming local.");
      return;
    }

    SaslNettyServer saslNettyServer = NettyServer.channelSaslNettyServers.get(ctx.getChannel());
    if (saslNettyServer == null) {
      LOG.error("doRequest(): No SaslNettyServer found for channel to client: " + ctx.getChannel() +
        "returning without attempt to respond to client's SASL message");
      return;
    }

    LOG.debug("client's token's length is: " + token.length);
    // update existing token (client token) with a new token generated in response to this.
    LOG.debug("checking completeness of SASL (pre-response):" + saslNettyServer.isComplete());
    token = saslNettyServer.response(token);
    LOG.debug("checking completeness of SASL (post-response):" + saslNettyServer.isComplete());
    LOG.debug("server's token's length is: " + token.length);
    LOG.debug("Responding to client: " + ctx.getChannel().getRemoteAddress());
    ctx.getChannel().write(this);
    LOG.debug("Finished writing token to client.");
    if (saslNettyServer.isComplete()) {
      // In addition to the SASL response, we will also send a SASL-Complete message to the client.
      LOG.debug("writing out complete token now.");
      SaslComplete<I,V,E,M> saslComplete = new SaslComplete<I, V, E, M>();
      ctx.getChannel().write(saslComplete);
      LOG.debug("wrote out SASL-Completeness token now.");
    }
    return;
  }
}
